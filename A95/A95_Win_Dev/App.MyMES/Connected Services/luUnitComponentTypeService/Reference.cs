//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace App.MyMES.luUnitComponentTypeService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="luUnitComponentTypeService.IluUnitComponentTypeSVC")]
    public interface IluUnitComponentTypeSVC {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IluUnitComponentTypeSVC/Insert", ReplyAction="http://tempuri.org/IluUnitComponentTypeSVC/InsertResponse")]
        int Insert(App.Model.luUnitComponentType model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IluUnitComponentTypeSVC/Insert", ReplyAction="http://tempuri.org/IluUnitComponentTypeSVC/InsertResponse")]
        System.Threading.Tasks.Task<int> InsertAsync(App.Model.luUnitComponentType model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IluUnitComponentTypeSVC/Delete", ReplyAction="http://tempuri.org/IluUnitComponentTypeSVC/DeleteResponse")]
        bool Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IluUnitComponentTypeSVC/Delete", ReplyAction="http://tempuri.org/IluUnitComponentTypeSVC/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IluUnitComponentTypeSVC/Update", ReplyAction="http://tempuri.org/IluUnitComponentTypeSVC/UpdateResponse")]
        bool Update(App.Model.luUnitComponentType model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IluUnitComponentTypeSVC/Update", ReplyAction="http://tempuri.org/IluUnitComponentTypeSVC/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(App.Model.luUnitComponentType model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IluUnitComponentTypeSVC/Get", ReplyAction="http://tempuri.org/IluUnitComponentTypeSVC/GetResponse")]
        App.Model.luUnitComponentType Get(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IluUnitComponentTypeSVC/Get", ReplyAction="http://tempuri.org/IluUnitComponentTypeSVC/GetResponse")]
        System.Threading.Tasks.Task<App.Model.luUnitComponentType> GetAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IluUnitComponentTypeSVC/ListAll", ReplyAction="http://tempuri.org/IluUnitComponentTypeSVC/ListAllResponse")]
        App.Model.luUnitComponentType[] ListAll(string S_Where);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IluUnitComponentTypeSVC/ListAll", ReplyAction="http://tempuri.org/IluUnitComponentTypeSVC/ListAllResponse")]
        System.Threading.Tasks.Task<App.Model.luUnitComponentType[]> ListAllAsync(string S_Where);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IluUnitComponentTypeSVCChannel : App.MyMES.luUnitComponentTypeService.IluUnitComponentTypeSVC, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IluUnitComponentTypeSVCClient : System.ServiceModel.ClientBase<App.MyMES.luUnitComponentTypeService.IluUnitComponentTypeSVC>, App.MyMES.luUnitComponentTypeService.IluUnitComponentTypeSVC {
        
        public IluUnitComponentTypeSVCClient() {
        }
        
        public IluUnitComponentTypeSVCClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IluUnitComponentTypeSVCClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IluUnitComponentTypeSVCClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IluUnitComponentTypeSVCClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Insert(App.Model.luUnitComponentType model) {
            return base.Channel.Insert(model);
        }
        
        public System.Threading.Tasks.Task<int> InsertAsync(App.Model.luUnitComponentType model) {
            return base.Channel.InsertAsync(model);
        }
        
        public bool Delete(int id) {
            return base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public bool Update(App.Model.luUnitComponentType model) {
            return base.Channel.Update(model);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(App.Model.luUnitComponentType model) {
            return base.Channel.UpdateAsync(model);
        }
        
        public App.Model.luUnitComponentType Get(int id) {
            return base.Channel.Get(id);
        }
        
        public System.Threading.Tasks.Task<App.Model.luUnitComponentType> GetAsync(int id) {
            return base.Channel.GetAsync(id);
        }
        
        public App.Model.luUnitComponentType[] ListAll(string S_Where) {
            return base.Channel.ListAll(S_Where);
        }
        
        public System.Threading.Tasks.Task<App.Model.luUnitComponentType[]> ListAllAsync(string S_Where) {
            return base.Channel.ListAllAsync(S_Where);
        }
    }
}
